{
	"info": {
		"_postman_id": "a659edd9-c0cb-4bcc-8a97-e9339d92479f",
		"name": "simple book api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40789453",
		"_collection_link": "https://wld555.postman.co/workspace/bed8e4ec-4e5c-4bc2-a746-0cba15c92e84/collection/40789453-a659edd9-c0cb-4bcc-8a97-e9339d92479f?action=share&source=collection_link&creator=40789453"
	},
	"item": [
		{
			"name": "get status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*pm.test(\"Status code is 200\",function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"let res= pm.response.json();\r",
							"\r",
							"console.log(res.status)\r",
							"console.log(res['status'])\r",
							"\r",
							"pm.test(\"status should be ok\",()=>{\r",
							"\r",
							"    pm.expect(pm.response.json().status).to.eq(\"OK\")\r",
							"    pm.sendRequest(pm.collectionVariables.get(\"url\")+ '/status')\r",
							"})\r",
							"pm.execution.setNextRequest(\"get list of books\");*/\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response has 'status' key\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"status\");\r",
							"});\r",
							"pm.test(\"Status value is 'OK'\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/status",
					"host": [
						"{{url}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "get list of books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"   \r",
							"});\r",
							"//validating response body\r",
							"let res= pm.response.json();\r",
							"//filtering books only which are available\r",
							"let nonficbook=  res.filter(\r",
							"    (book)=>book.available ===true\r",
							");\r",
							"\r",
							"let book= nonficbook[0];\r",
							"if(book){\r",
							"  pm.globals.set(\"bookID\",book.id)\r",
							"}\r",
							"//different ways of checking availability of book selected above\r",
							"pm.test(\"book found\",()=>{\r",
							"    pm.expect(book).to.be.an('object')\r",
							"    pm.expect(book.available).to.be.true;\r",
							"    pm.expect(book.available).to.eql(true)\r",
							"    pm.expect(book.type).to.eql('non-fiction')\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/books?type=non-fiction&limit=10",
					"host": [
						"{{url}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction"
						},
						{
							"key": "limit",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "post order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 201\",()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201])\r",
							"    pm.response.to.have.header(\"Connection\",\"keep-alive\")\r",
							"});\r",
							"pm.test(\"Set Postman variables\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.collectionVariables.set(\"orderId\", jsonData.orderId);\r",
							"    console.log(\"Variables set: orderId\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": {{bookId}},\r\n  \"customerName\": {{custname}},\r\n  \"quantity\":5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/orders",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a single book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*pm.test(\"Status code is 200\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"let res= pm.response.json();\r",
							"\r",
							"pm.test(\"Is in stock\",()=>{\r",
							"    pm.expect((res['current-stock'])).to.be.above(2);\r",
							"});*/\r",
							"\r",
							"pm.test(\"Status code is 200\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"pm.test(\"Get and log Previous set  variables\", function () {\r",
							"    let bookID=pm.collectionVariables.get(\"bookId\");\r",
							"    let orderId = pm.collectionVariables.get(\"orderId\");\r",
							"    console.log(\"Book id\",bookID)\r",
							"    console.log(\"Order ID:\", orderId);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}//books/{{bookId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"",
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "register api client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\",()=>{\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
							"})\r",
							"pm.collectionVariables.set(\"token\",pm.response.json().accessToken)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"{{$randomFullName}}\",\r\n   \"clientEmail\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api-clients",
					"host": [
						"{{url}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"   \r",
							"});\r",
							"pm.test(\"Iterate over all items in the array\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    for (let i = 0; i < jsonData.length; i++) {\r",
							"        console.log(`Order ${i + 1}:`, jsonData[i]);\r",
							"    }\r",
							"});\r",
							"pm.test(\"Check orders with quantity greater than 1\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    jsonData.forEach(order => {\r",
							"        if (order.quantity > 1) {\r",
							"            console.log(\"Order with quantity greater than 1:\", order.id,order.bookId);\r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/orders",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "get an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\")\r",
							"   \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/orders/{{orderId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\",()=>{\r",
							"    pm.response.to.have.status(204)\r",
							"   \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"Harry\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}//orders/:orderId",
					"host": [
						"{{url}}"
					],
					"path": [
						"",
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\",()=>{\r",
							"    pm.response.to.have.status(204)\r",
							"    \r",
							"   \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}//orders/:orderId",
					"host": [
						"{{url}}"
					],
					"path": [
						"",
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://simple-books-api.glitch.me",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "custname",
			"value": "\"John\""
		},
		{
			"key": "or_id",
			"value": "6fI5BzRZJBe4riByqs8VP"
		},
		{
			"key": "status",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "bookId",
			"value": ""
		}
	]
}